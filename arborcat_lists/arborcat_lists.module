<?php

use Elasticsearch\ClientBuilder;

function arborcat_lists_theme($existing, $type, $theme, $path) {
  return [
    'user_lists' => [
      'variables' => [
        'lists' => NULL,
        'pub_view' => NULL,
        'total_results' => NULL,
        'pager' => NULL
      ]
    ],
    'user_list_view' => [
      'variables' => [
        'list_items' => NULL,
        'total_results' => NULL,
        'pager' => NULL
      ]
    ]
  ];
}

function arborcat_lists_user_update($user) {
  if ($user->get('profile_cohist')->value &&
      !$user->original->get('profile_cohist')->value) {
    drupal_set_message('Enabling Checkout History');
    arborcat_lists_update_user_history($user->get('uid')->value);
  }
}

function arborcat_lists_get_lists($uid, $offset = NULL, $per_page = NULL) {
  $user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
  $connection = \Drupal::database();

  $public = '';
  if (($user->get('uid')->value != $uid) && (!$user->hasPermission('administer users'))) {
    // Not current user and not admin, limit to public lists
    $public = " AND public = 1";
  }

  $limit = (isset($offset) && isset($per_page) ? " LIMIT $offset, $per_page" : '');

  // grab lists from DB
  $query = $connection->query("SELECT * FROM arborcat_user_lists WHERE uid=:uid $public $limit", [':uid' => $uid]);
  $lists = $query->fetchAll();

  for ($i = 0; $i < count($lists); $i++) {
    $query = $connection->query("SELECT bib FROM arborcat_user_list_items WHERE list_id=:lid ORDER BY list_order DESC LIMIT 1",
      [':lid' => $lists[$i]->id]);
    $res = $query->fetch();
    if (isset($res->bib)) {
      $lists[$i]->bib = $res->bib;
    }
  }

  return $lists;
}

function arborcat_lists_add_list_item($list_id, $bib, $timestamp = NULL) {
  // Check if item is already on list
  $db = \Drupal::database();
  $existing = $db->query('SELECT * from arborcat_user_list_items WHERE list_id = :lid and bib = :bib',
                         [':lid' => $list_id, ':bib' => $bib])->fetch();
  if ($existing) {
    // if timestamp passed in, update the timestamp on the existing tag
    if ($timestamp) {
      $db->update('arborcat_user_list_items')
        ->fields(['timestamp' => $timestamp])
        ->condition('item_id', $existing->item_id)
        ->execute();
      return TRUE;
    }
    else {
      return FALSE;
    }
  }
  else {
    // New entry
    $fields = [
      'list_id' => $list_id,
      'bib' => $bib,
      'timestamp' => ($timestamp ? $timestamp : time()),
    ];

    $row = $db->query('SELECT MAX(list_order) as max FROM arborcat_user_list_items WHERE list_id = :lid',
                      [':lid' => $list_id])->fetch();
    $fields['list_order'] = $row->max + 1;

    $db->insert('arborcat_user_list_items')
      ->fields($fields)
      ->execute();
    return TRUE;
  }
}

function arborcat_lists_update_user_history($uid, $seed_only = FALSE) {
  // Get user's checkouts
  $account = \Drupal\user\Entity\User::load($uid);
  if ($api_key = $account->get('field_api_key')->value) {
    // Get Checkouts from API
    $api_url = \Drupal::config('arborcat.settings')->get('api_url');
    $guzzle = \Drupal::httpClient();
    try {
      $json = $guzzle->get("$api_url/patron/$api_key/checkouts")->getBody()->getContents();
    }
    catch (\Exception $e) {
      drupal_set_message('Error retrieving checkouts', 'error');
      return [
        'error' => 'Error retrieving checkouts',
        'message' => $e->getMessage()
      ];
    }

    $checkouts = json_decode($json);

    $co_bnums = array();
    if (isset($checkouts->out)) {
      foreach ($checkouts->out as $checkout) {
        $co_bnums[$checkout->bnum] = $checkout->bnum;
      }
    }

    if (count($co_bnums) && !$seed_only) {
      $bnums_to_add = [];

      // Find user's checkout history list
      $db = \Drupal::database();
      $ch = $db->query("SELECT id FROM {arborcat_user_lists} WHERE uid = :uid AND title = 'Checkout History' LIMIT 1", [':uid' => $uid])->fetch();
      if ($ch->id) {
        $list_id = $ch->id;

        // Grab current items in Checkout History
        $ch_bnums = [];
        $list_items = $db->query("SELECT bib FROM {arborcat_user_list_items} WHERE list_id = :lid", [':lid' => $ch->id])->fetchAll();
        foreach ($list_items as $list_item) {
          $ch_bnums[$list_item->bib] = $list_item->bib;
        }

        // Grab cache from last Checkout History check
        $cc_bnums = \Drupal::service('user.data')->get('arborcat_lists', $uid, 'cc_bnums');
        foreach ($co_bnums as $co_bnum) {
          if (!isset($ch_bnums[$co_bnum]) && !isset($cc_bnums[$co_bnum])) {
            $bnums_to_add[] = $co_bnum;
          }
        }
      }
      else {
        // Create a new Checkout History list
        $list_id = $db->insert('arborcat_user_lists')
          ->fields(['uid' => $uid, 'title' => 'Checkout History', 'description' => 'My Checkout History'])
          ->execute();
        // Add all current checkouts into Checkout History
        $bnums_to_add = $co_bnums;
      }

      $timestamp = mktime(0, 0, 0); // Make checkout date midnight
      // add the bnums in checkouts not present in checkout history
      foreach ($bnums_to_add as $bnum) {
        arborcat_lists_add_list_item($list_id, $bnum, $timestamp);
      }

      if ($total = count($bnums_to_add)) {
        drupal_set_message("Updated Checkout History with $total new checkouts");
      }
    }

    // Save checkouts to checkout cache
    $userData = \Drupal::service('user.data');
    $userData->delete('arborcat_lists', $uid, 'cc_bnums');
    $userData->set('arborcat_lists', $uid, 'cc_bnums', $co_bnums);
  }
}

function _arborcat_lists_batch_update_user_history($offset = 0, $limit = 0) {
  // Select checkout history users
  $query = \Drupal::entityQuery('user')->condition('profile_cohist', 1)->exists('field_api_key');
  if ($offset || $limit) {
    $limit = ($limit ? $limit : 9999999);
    $query->range($offset, $limit);
  }
  $uids = $query->execute();

  $message = date('[Y-m-d H:i:s]') . ' Checkout History Start for ' . count($uids) . " Lists\n";
  echo $message;
  file_put_contents('update_checkout_history.log', $message, FILE_APPEND | LOCK_EX);

  foreach ($uids as $uid) {
    $message = date('[Y-m-d H:i:s]') . " Updating UID:$uid";
    $result = arborcat_lists_update_user_history($uid);
    if (isset($result['error'])) {
      $message .= ' ERROR:' . $result['error'];
    }
    else {
      $message .= ' SUCCESS';
    }
    $message .= "\n";

    echo $message;
    file_put_contents('update_checkout_history.log', $message, FILE_APPEND | LOCK_EX);
  }
}

/*
  Import checkouts from old Sopac History entries
  Can be removed once migration is complete
*/
function _arborcat_lists_import_sopac_history($uid) {
  $db = \Drupal::database();

  $query = $db->query('SELECT * FROM {sopac_history} WHERE uid = ' . $uid . ' ORDER BY codate ASC');
  $checkouts = $query->fetchAll();

  if (count($checkouts)) {
    echo "Import History for User: $uid";

    // Find Checkout History List
    $ch = $db->query("SELECT id FROM {arborcat_user_lists} WHERE uid = :uid AND title = 'Checkout History' LIMIT 1", [':uid' => $uid])->fetch();
    if ($ch->id) {
      $list_id = $ch->id;
      echo " Existing List: $list_id";
    }
    else {
      // Create a new Checkout History list
      $list_id = $db->insert('arborcat_user_lists')
        ->fields(['uid' => $uid, 'title' => 'Checkout History', 'description' => 'My Checkout History'])
        ->execute();
      echo " New List: $list_id";
    }

    foreach ($checkouts as $checkout) {
      // Get new bnum
      $bnum = $checkout->bnum;
      $row = $db->query('SELECT * FROM aadlexport.iii_to_evg WHERE iii_bibnumber = ' . $bnum)->fetch();
      if (isset($row->evg_bibnumber)) {
        $bnum = $row->evg_bibnumber;
      }
      arborcat_lists_add_list_item($list_id, $bnum, strtotime($checkout->codate));
    }
  }
}

/*
  Worker function for Sopac History import
*/
function _arborcat_lists_sopac_history_worker($start = 0, $length = 0) {
  // Select all current users with checkout history enabled
  $query = \Drupal::entityQuery('user')->condition('profile_cohist', 1);
  if ($start || $length) {
    $query->range($start, $length);
  }
  $uids = $query->execute();

  foreach ($uids as $uid) {
    _arborcat_lists_import_sopac_history($uid);
  }
}

function arborcat_lists_search_lists($term) {
  $offset = ($_GET['page'] ?? 0) * 20;

  $db = \Drupal::database();
  $query = $db->select('arborcat_user_lists', 'lists')
    ->fields('lists', ['title', 'description', 'public', 'id'])
    ->condition(db_or()->condition('title', "%" . $db->escapeLike($term) . "%", 'LIKE')
      ->condition('description', "%" . $db->escapeLike($term) . "%", 'LIKE'));

  $lists['total'] = $query->execute()->fetchAll();
  $lists['lists'] = $query->range($offset, 20)->execute()->fetchAll();

  return $lists;
}

function arborcat_lists_search_list_items($lid = 0, $term = '', $sort = 'list_order') {
  $db = \Drupal::database();
  $offset = ($_GET['page'] ?? 0) * 20;
  if ($sort == 'list_order' && $term == '*') {
    $limit = " LIMIT $offset, 20";
    $offset = 0;
  } else {
    $limit = '';
  }
  $query = $db->query("SELECT * FROM arborcat_user_list_items WHERE list_id=:lid ORDER BY list_order ASC$limit",
      [':lid' => $lid]);
  $items = $query->fetchAll();
  if (!count($items)) {
    return NULL;
  }
  
  $hosts = [
    [
      'host' => \Drupal::config('arborelastic.settings')->get('arborelastic_host'),
      'port' => \Drupal::config('arborelastic.settings')->get('arborelastic_port'),
      'user' => \Drupal::config('arborelastic.settings')->get('arborelastic_user'),
      'pass' => \Drupal::config('arborelastic.settings')->get('arborelastic_pass'),
    ]
  ];

  $es_client = ClientBuilder::create()->setHosts($hosts)->build();

  $es_query = [
    'bool' => [
      'must' => [
        [
          'query_string' => [
            'query' => $term,
            'fields' => ['_all'],
            'default_operator' => 'and'
          ]
        ]
      ]
    ]
  ];

  foreach ($items as $item) {
    $es_query['bool']['filter']['terms']['bnum'][] = $item->bib;
  }

  $params = [
    'index' => 'bibs',
    'from' => $offset,
    'body' => [
      'size' => 20,
      'query' => $es_query
    ]
  ];

  if ($sort != 'list_order') {
    $sort_field = $sort . '.keyword';
    $sort = [
      $sort_field => [
        'order' => 'asc'
      ]
    ];
    $params['body']['sort'] = $sort;
  }

  try {
    $results = $es_client->search($params);
  }
  catch (\Exception $e) {
    $result = [
      'error' => 'Elasticsearch Query Failed',
      'message' => $e->getMessage(),
    ];
  }

  foreach ($results['hits']['hits'] as $k => $result) {
    foreach ($items as $item) {
      if ($result['_id'] == $item->bib) {
        $results['hits']['hits'][$k]['_source']['list_order'] = $item->list_order;
        $results['hits']['hits'][$k]['_source']['timestamp'] = $item->timestamp;
      }
    }
  }

  return $results;

}
