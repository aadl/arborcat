<?php

use Elasticsearch\ClientBuilder;
use Symfony\Component\HttpFoundation\JsonResponse;

function arborcat_lists_theme($existing, $type, $theme, $path) {
  return [
    'user_lists' => [
      'variables' => [
        'lists' => NULL,
        'pub_view' => NULL,
        'total_results' => NULL,
        'pager' => NULL
      ]
    ],
    'user_list_view' => [
      'variables' => [
        'list_items' => NULL,
        'total_results' => NULL,
        'pager' => NULL
      ]
    ]
  ];
}

function arborcat_lists_user_update($user) {
  if ($user->get('profile_cohist')->value &&
      !$user->original->get('profile_cohist')->value) {
    \Drupal::messenger()->addMessage('Enabling Checkout History');
    arborcat_lists_update_user_history($user->get('uid')->value);
  }
}

function arborcat_lists_get_lists($uid, $offset = NULL, $per_page = NULL) {
  $user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
  $connection = \Drupal::database();

  $public = '';
  if (($user->get('uid')->value != $uid) && (!$user->hasPermission('administer users'))) {
    // Not current user and not admin, limit to public lists
    $public = " AND public = 1";
  }

  $additional_accounts = arborcat_additional_accounts($user);

  $limit = (isset($offset) && isset($per_page) ? " LIMIT $offset, $per_page" : '');
  // grab lists from DB
  $query = $connection->query("SELECT * FROM arborcat_user_lists WHERE uid=:uid $public $limit", [':uid' => $uid]);
  $lists = $query->fetchAll();
  for ($i = 0; $i < count($lists); $i++) {
    $query = $connection->query("SELECT bib FROM arborcat_user_list_items WHERE list_id=:lid ORDER BY list_order DESC LIMIT 1",
      [':lid' => $lists[$i]->id]);
    $res = $query->fetch();
    if (isset($res->bib)) {
      $lists[$i]->bib = $res->bib;
    }

    // get the patron's name for use when displaying the "Checkout History" list titles in the theme
    foreach ($additional_accounts as $evg_account) {
      if ($evg_account['patron_id'] == $lists[$i]->pnum) {
        $lists[$i]->patron_name = $evg_account['subaccount']->name;
        break;
      }
    }
  }
  return $lists;
}

function arborcat_lists_add_list_item($list_id, $bib, $timestamp = NULL) {
  // Check if item is already on list
  $db = \Drupal::database();
  $existing = $db->query('SELECT * from arborcat_user_list_items WHERE list_id = :lid and bib = :bib',
                         [':lid' => $list_id, ':bib' => $bib])->fetch();
  if ($existing) {
    // if timestamp passed in, update the timestamp on the existing tag
    if ($timestamp) {
      $db->update('arborcat_user_list_items')
        ->fields(['timestamp' => $timestamp])
        ->condition('item_id', $existing->item_id)
        ->execute();
      return TRUE;
    }
    else {
      return FALSE;
    }
  }
  else {
    // New entry
    $fields = [
      'list_id' => $list_id,
      'bib' => $bib,
      'timestamp' => ($timestamp ? $timestamp : time()),
    ];

    $row = $db->query('SELECT MAX(list_order) as max FROM arborcat_user_list_items WHERE list_id = :lid',
                      [':lid' => $list_id])->fetch();
    $fields['list_order'] = $row->max + 1;

    $db->insert('arborcat_user_list_items')
      ->fields($fields)
      ->execute();
    return TRUE;
  }
}

function arborcat_lists_update_user_history($uid, $seed_only = FALSE) {
  $api_url = \Drupal::config('arborcat.settings')->get('api_url');
  $guzzle = \Drupal::httpClient();  // Get user's checkouts
  $account = \Drupal\user\Entity\User::load($uid);
  // get all the evg accounts associated with this account
  $additional_accounts = arborcat_additional_accounts($account);
  // Loop through each of the evg accounts  
  // - the first one (and maybe the only one) will be the primary account 
  // - followed by any additional accounts
  foreach ($additional_accounts as $evg_account) {
    $api_key = $evg_account['api_key'];
    try {
      $json = $guzzle->get("$api_url/patron/$api_key/checkouts")->getBody()->getContents();
    }
    catch (\Exception $e) {
      \Drupal::messenger()->addError('Error retrieving checkouts');
      return [
        'error' => 'Error retrieving checkouts',
        'message' => $e->getMessage()
      ];
    }  
    $checkouts = json_decode($json);
    $co_bnums = array();
    if (isset($checkouts->out)) {
      foreach ($checkouts->out as $checkout) {
        // Ignore MelCat items for Checkout History
        if (stripos($checkout->material, 'melcat') !== 0) {
          $co_bnums[$checkout->bnum] = $checkout->bnum;
        }
      }
    }

    if (count($co_bnums) && !$seed_only) {
      $bnums_to_add = [];

      // Find user's checkout history list
      $pnum = ($evg_account['delta'] == 0) ? 0 : $evg_account['patron_id'];
      $db = \Drupal::database();
      $ch_list = $db->query("SELECT id FROM {arborcat_user_lists} WHERE uid = :uid AND title = 'Checkout History' AND pnum = :pnum LIMIT 1", 
                        [':uid' => $uid, 'pnum' => $pnum])->fetch();
      if ($ch_list != null && property_exists($ch_list, 'id')) {
        $list_id = $ch_list->id;

        // Grab current items in Checkout History
        $ch_bnums = [];
        $list_items = $db->query("SELECT bib FROM {arborcat_user_list_items} WHERE list_id = :lid", [':lid' => $ch_list->id])->fetchAll();
        foreach ($list_items as $list_item) {
          $ch_bnums[$list_item->bib] = $list_item->bib;
        }
        // Grab cache from last Checkout History check
        $cc_bnums = \Drupal::service('user.data')->get('arborcat_lists', $uid, 'cc_bnums');
        foreach ($co_bnums as $co_bnum) {
          if (!isset($ch_bnums[$co_bnum]) && !isset($cc_bnums[$co_bnum])) {
            $bnums_to_add[] = $co_bnum;
          }
        }
      }
      else {
        // Create a new Checkout History list
        $description_text = ($evg_account['delta'] > 0) ? $evg_account['subaccount']->name . "'s Checkout History" : "My Checkout History";
        $list_id = $db->insert('arborcat_user_lists')
          ->fields(['uid' => $uid, 'pnum' => $pnum, 'title' => 'Checkout History', 'description' => $description_text])
          ->execute();
        // Add all current checkouts into Checkout History
        $bnums_to_add = $co_bnums;
      }

      // Summer Game
      if (\Drupal::moduleHandler()->moduleExists('summergame')) {
        if (\Drupal::config('summergame.settings')->get('summergame_points_enabled')) {
          $user_data = \Drupal::service('user.data');
          if ($sg_active_pid = $user_data->get('summergame', $uid, 'sg_active_pid')) {
            $player = summergame_player_load($sg_active_pid);
          }
          else {
            $player = summergame_player_load(['uid' => $uid]);
          }
        }
      }

      $timestamp = mktime(0, 0, 0); // Make checkout date midnight
      // add the bnums in checkouts not present in checkout history
      foreach ($bnums_to_add as $bnum) {
        arborcat_lists_add_list_item($list_id, $bnum, $timestamp);
        if ($player) {
          $metadata = array('bnum' => $bnum);
          $points = summergame_player_points($player['pid'], 10, 'Checkout History',
                                             'Item added from Checkout History', $metadata);
          $player_name = $player['nickname'] ? $player['nickname'] : $player['name'];
          \Drupal::messenger()->addMessage("Player $player_name earned $points Summer Game points for a new checkout.");
        }
      }

      if ($total = count($bnums_to_add)) {
        $message = "Updated Checkout History with $total new checkout";
        $message .= ($total > 1) ? 's' : '';
        \Drupal::messenger()->addMessage($message);
      }
    }

    // Save checkouts to checkout cache
    $user_data = \Drupal::service('user.data');
    $user_data->delete('arborcat_lists', $uid, 'cc_bnums');
    $user_data->set('arborcat_lists', $uid, 'cc_bnums', $co_bnums);
  }
}

function _arborcat_lists_batch_update_user_history($offset = 0, $limit = 0) {
  // Select checkout history users
  $query = \Drupal::entityQuery('user')->condition('profile_cohist', 1)->exists('field_api_key');
  if ($offset || $limit) {
    $limit = ($limit ? $limit : 9999999);
    $query->range($offset, $limit);
  }
  $uids = $query->execute();

  $message = date('[Y-m-d H:i:s]') . ' Checkout History Start for ' . count($uids) . " Lists\n";
  echo $message;
  file_put_contents('update_checkout_history.log', $message, FILE_APPEND | LOCK_EX);

  foreach ($uids as $uid) {
    $message = date('[Y-m-d H:i:s]') . " Updating UID:$uid";
    $result = arborcat_lists_update_user_history($uid);
    if (isset($result['error'])) {
      $message .= ' ERROR:' . $result['error'];
    }
    else {
      $message .= ' SUCCESS';
    }
    $message .= "\n";

    echo $message;
    file_put_contents('update_checkout_history.log', $message, FILE_APPEND | LOCK_EX);
  }
}

/*
  Import checkouts from old Sopac History entries
  Can be removed once migration is complete
*/
function _arborcat_lists_import_sopac_history($uid) {
  $db = \Drupal::database();

  $query = $db->query('SELECT * FROM {sopac_history} WHERE uid = ' . $uid . ' ORDER BY codate ASC');
  $checkouts = $query->fetchAll();

  if (count($checkouts)) {
    echo "Import History for User: $uid";

    // Find Checkout History List
    $ch_list = $db->query("SELECT id FROM {arborcat_user_lists} WHERE uid = :uid AND title = 'Checkout History' LIMIT 1", [':uid' => $uid])->fetch();
    if ($ch_list->id) {
      $list_id = $ch_list->id;
      echo " Existing List: $list_id";
    }
    else {
      // Create a new Checkout History list
      $list_id = $db->insert('arborcat_user_lists')
        ->fields(['uid' => $uid, 'title' => 'Checkout History', 'description' => 'My Checkout History'])
        ->execute();
      echo " New List: $list_id";
    }

    foreach ($checkouts as $checkout) {
      // Get new bnum
      $bnum = $checkout->bnum;
      $row = $db->query('SELECT * FROM aadlexport.iii_to_evg WHERE iii_bibnumber = ' . $bnum)->fetch();
      if (isset($row->evg_bibnumber)) {
        $bnum = $row->evg_bibnumber;
      }
      arborcat_lists_add_list_item($list_id, $bnum, strtotime($checkout->codate));
    }
  }
}

/*
  Worker function for Sopac History import
*/
function _arborcat_lists_sopac_history_worker($start = 0, $length = 0) {
  // Select all current users with checkout history enabled
  $query = \Drupal::entityQuery('user')->condition('profile_cohist', 1);
  if ($start || $length) {
    $query->range($start, $length);
  }
  $uids = $query->execute();

  foreach ($uids as $uid) {
    _arborcat_lists_import_sopac_history($uid);
  }
}

function arborcat_lists_search_lists($term) {
  $offset = ($_GET['page'] ?? 0) * 20;

  $db = \Drupal::database();

  $query = $db->select('arborcat_user_lists', 'lists')
    ->fields('lists', ['title', 'description', 'public', 'id', 'uid'])
    ->condition('public', '1');
  $cond_group = $query->orConditionGroup()
      ->condition('title', "%" . $db->escapeLike($term) . "%", 'LIKE')
      ->condition('description', "%" . $db->escapeLike($term) . "%", 'LIKE');
  $query->condition($cond_group);

  $lists['total'] = $query->execute()->fetchAll();
  $lists['lists'] = $query->range($offset, 20)->execute()->fetchAll();

  return $lists;
}

function arborcat_lists_search_list_items($lid = 0, $term = '', $sort = 'list_order_desc') {
  $db = \Drupal::database();
  $offset = ($_GET['page'] ?? 0) * 20;
  if (($sort == 'list_order' || $sort == 'list_order_desc') && $term == '*') {
    $limit = " LIMIT $offset, 20";
    $offset = 0;
  } else {
    $limit = '';
  }
  $order = ($sort == 'list_order_desc' ? 'DESC' : 'ASC');
  $query = $db->query("SELECT * FROM arborcat_user_list_items WHERE list_id=:lid ORDER BY list_order $order$limit",
      [':lid' => $lid]);
  $items = $query->fetchAll();
  if (!count($items)) {
    return NULL;
  }

  $hosts = [
    [
      'host' => \Drupal::config('arborelastic.settings')->get('arborelastic_host'),
      'port' => \Drupal::config('arborelastic.settings')->get('arborelastic_port'),
      'user' => \Drupal::config('arborelastic.settings')->get('arborelastic_user'),
      'pass' => \Drupal::config('arborelastic.settings')->get('arborelastic_pass'),
    ]
  ];

  $es_client = ClientBuilder::create()->setHosts($hosts)->build();

  $es_query = [
    'bool' => [
      'must' => [
        [
          'query_string' => [
            'query' => "*$term*",
            'fields' => ['_all'],
            'default_operator' => 'and'
          ]
        ]
      ]
    ]
  ];

  foreach ($items as $item) {
    $es_query['bool']['filter']['terms']['_id'][] = $item->bib;
  }

  $params = [
    'index' => 'bibs',
    'from' => $offset,
    'body' => [
      'size' => 20,
      'query' => $es_query
    ]
  ];

  if ($sort != 'list_order' && $sort != 'list_order_desc') {
    $sort_field = $sort . '.keyword';
    $sort = [
      $sort_field => [
        'order' => 'asc'
      ]
    ];
    $params['body']['sort'] = $sort;
  }

  try {
    $results = $es_client->search($params);
  }
  catch (\Exception $e) {
    $result = [
      'error' => 'Elasticsearch Query Failed',
      'message' => $e->getMessage(),
    ];
  }

  foreach ($results['hits']['hits'] as $k => $result) {
    foreach ($items as $item) {
      if ($result['_id'] == $item->bib) {
        $results['hits']['hits'][$k]['_source']['list_order'] = $item->list_order;
        $results['hits']['hits'][$k]['_source']['timestamp'] = $item->timestamp;
      }
    }
  }
  // get totals for records due to ones that don't exist anymore
  $query = $db->query("SELECT * FROM arborcat_user_list_items WHERE list_id=:lid ORDER BY list_order",
    [':lid' => $lid]);
  $items = $query->fetchAll();
  $es_query['bool']['filter']['terms']['_id'] = [];
  foreach ($items as $item) {
    $es_query['bool']['filter']['terms']['_id'][] = $item->bib;
  }
  $params['body']['query'] = $es_query;
  unset($params['body']['size']);
  unset($params['body']['offset']);

  try {
    $totals = $es_client->search($params);
  }
  catch (\Exception $e) {
    $result = [
      'error' => 'Elasticsearch Query Failed',
      'message' => $e->getMessage(),
    ];
  }

  $results['hits']['total'] = $totals['hits']['total'];

  return $results;

}

function arborcat_lists_remove_checkout_history($uid, $pnum) {
    $db = \Drupal::database();
    $checkout_list = $db->query("SELECT * FROM arborcat_user_lists WHERE title like '%Checkout History' AND uid=:uid AND pnum=:pnum", 
                      [':uid' => $uid, ':pnum' => $pnum])->fetch();
    if ($checkout_list && $checkout_list->id) {

      $user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());

      if ($user->get('uid')->value == $checkout_list->uid || $user->hasRole('administrator')) {
        arborcat_lists_delete_list($checkout_list->id);
        $response['success'] = true;
      } 
      else {
        $response['success'] = false;
        $response['error'] = "You don't have permission to delete this list";
      }
    } 
    else {
      $response['error'] = "No list found for $uid, $pnum";
      $response['success'] = false;
    }

    if ($response['success'] == true ) {
      $response['message'] = "Deleted checkout history list for $pnum";
    }
    else {
      \Drupal::messenger()->add($response['error']);
    }

    return new JsonResponse($response);
}

function arborcat_lists_delete_list($list_id) {
  $connection = \Drupal::database();
  $connection->delete('arborcat_user_list_items')
    ->condition('list_id', $list_id)
    ->execute();
  $connection->delete('arborcat_user_lists')
    ->condition('id', $list_id)
    ->execute();
}

function arborcat_fix_checkout_history() {
  $response = [];
  $db = \Drupal::database();
  // Retrieve all the "problem" COH records (pnum = patron_id)
  $query = "SELECT * FROM arborcat_user_lists aul ";
  $query .= "join user__field_patron_id ufpi on ufpi.entity_id = aul.uid ";
  $query .= "where (pnum=ufpi.field_patron_id_value) and title='Checkout History' and description='My Checkout History' order by uid";
  $problem_checkout_lists = $db->query($query)->fetchAll();

  $response = (count($problem_checkout_lists) > 0) ? ['problem_coh_lists_count' => count($problem_checkout_lists), 'success' => true] : ['success' => false];

  $db = \Drupal::database();
  // Retrieve all the "correct" COH records (pnum=0)
  $query = "SELECT * FROM arborcat_user_lists aul ";
  $query .= "join user__field_patron_id ufpi on ufpi.entity_id = aul.uid ";
  $query .= "where (pnum=0) and ufpi.delta = 0 and title='Checkout History' order by uid asc"; // and (description='' or description like '%checkout history%') 
  $checkout_lists_pnum_0 = $db->query($query)->fetchAll();
  $response['correct_coh_lists_count'] = count($checkout_lists_pnum_0);

  // Now loop through the problem checkout lists and see if there is a matching correct checkout history
  $count = 0;
  $match_count = 0;
  $no_match_count = 0;

  $multiple_matches = [];
  $no_matches = [];
  $num_problem_list_items = 0;

  $multiple_matches_count = 0;

  $processed_successfully = [];
  $processed_unsuccessfully = [];
  $processed_successfully_count = 0;

  // ==================================== MAIN LOOP ==================================
  foreach($problem_checkout_lists as $problem_co_list) {


    $match_list_ids = [];
    // build up an array of matching "correct" list ids that match uid with problem list uid
    foreach($checkout_lists_pnum_0 as $co_list_pnum_0) {
      if ($problem_co_list->uid == $co_list_pnum_0->uid) {
        $match_list_ids[] = $co_list_pnum_0->id;
        //$match_stuff[] = $co_list_pnum_0->title;
        //$match_stuff[] = $co_list_pnum_0->description;
      }
    }
    
    if (count($match_list_ids) > 0) {
      $match_count += 1;
      if (count($match_list_ids) == 1) {
        $target_cohist_list_id = $match_list_ids[0];
        // get the problem list items for the problem list
        $db = \Drupal::database();
        $query = $db->select('arborcat_user_list_items', 'auli')
                    ->fields('auli', ['bib'])
                    ->condition('list_id', $problem_co_list->id);
        $problem_list_items = $query->execute()->fetchAll();
        $num_problem_list_items += count($problem_list_items);

        // Loop through each of the items in the problem list and try addiing them to the "correct" list
        // Checking for more than one "correct" Checkout History list before adding the items.
        foreach($problem_list_items as $problem_item){
          // process the 1 to 1 matching Checkout Histories
          $result = arborcat_lists_add_list_item($target_cohist_list_id, $problem_item->bib);
          $processed_successfully_count += 1;

          arborcat_lists_delete_list($problem_co_list->id);
        }
      }
      else {
        $multiple_matches_count += 1;
        $multiple_matches[] = ['uid: ' . $problem_co_list->uid, $match_list_ids];
      }
    }
    else {
      $no_match_count += 1;
      //$logline = "#$count |-| " . $problem_co_list->id;
      $no_matches[] = $problem_co_list->id;
    }  

    $count += 1;
  }

  $response['match_count'] = $match_count;
  $response['no_match_count'] = $no_match_count;
  $response['multiple_matches_count'] = count($multiple_matches);
  $response['multiple_matches'] = $multiple_matches;
  $response['no_matches'] = $no_matches;
  $response['processed_successfully_count'] = $processed_successfully_count;
  $response['processed_unsuccessfully_count'] = count($processed_unsuccessfully);
  $response['processed_unsuccessfully'] = $processed_unsuccessfully;
  return $response;
}
