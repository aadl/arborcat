<?php

use Drupal\Core\Datetime\DrupalDateTime;

/**
 * Display help and module information
 * @return help text for section
 */
function arborcat_help($path, $arg) {
  $output = '';

  switch ($path) {
  case "admin/help#arborcat":
    $output = '<p>' .  t("Catalog functions for Evergreen") . '</p>';
    break;
  }

  return $output;
}

function arborcat_theme($existing, $type, $theme, $path) {
  return [
    'catalog' => [
      'variables' => [
        'catalog_slider' => NULL,
        'community_slider' => NULL,
        'podcast_slider' => NULL
      ]
    ],
    'catalog_record' => [
      'variables' => [
        'record' => NULL,
        'api_key' => NULL,
        'lists' => NULL,
        'reviews' => NULL,
        'review_form' => NULL,
        'ratings' => NULL
      ]
    ],
    'moderate_reviews' => [
      'variables' => [
        'reviews' => NULL,
        'pager' => NULL
      ]
    ],
    'pickup_request_form' => [
      'variables' => [
          'formhtml' => NULL,
      ]
    ],
   'pickup_helper_theme' => [
      'variables' => [
        'search_form' => NULL,
        'location_urls' => NULL,
        'barcode' => NULL,
        'scheduled_pickups' => NULL
      ]
    ],
  ];
}

/**
 * @param $variables
 */
function arborcat_preprocess_page(&$variables)
{
    // get the max locker item check  from ArborCat module settings
    $max_locker_items = \Drupal::config('arborcat.settings')->get('max_locker_items_check');
    $variables['#attached']['drupalSettings']['arborcat']['max_locker_items_check'] = $max_locker_items;
}

function arborcat_generate_api_key() {
  // Use the UUID service to generate a Unique identifier
  $uuid_service = \Drupal::service('uuid');
  return $uuid_service->generate();
}

// set drupal messages for fees or expired card
function arborcat_patron_fines_expired($fines, $patron) {
  $patron_clean = TRUE;
  $messenger = \Drupal::messenger();

  if ($fines->total > 25) {
    $messenger->addError("We're sorry, but your account balance is over $25. You won't be able to renew or request items.");
    $patron_clean = FALSE;
  }
  if (strtotime($patron->expires) < time()) {
    $message = \Drupal\Core\Render\Markup::create("We're sorry, but your card has expired! Details on how to <a href=\"https://aadl.org/node/569959\">renew online here</a>.");
    $messenger->addError($message);
    $patron_clean = FALSE;
  }

  return $patron_clean;
}

//check if a hold is eligible for a locker based on material type
  function arborcat_eligible_for_locker($hold) {
    if ($hold['material'] == "Art Print" || $hold['material'] == "Tools" || $hold['material'] == "Oversize") {
        return FALSE;
    } else {
        return TRUE;
    }
  }

  //check if there are lockers available to place holds into
  function arborcat_lockers_available($branch) {
    $mess = \Drupal::messenger();
    $available=FALSE;
    if (stripos($branch, 'Malletts')!==FALSE) {
        $locker_server = 'mcblockers';
    } elseif (stripos($branch, 'Pittsfield')!==FALSE) {
        $locker_server = 'ptslockers';
    }
    if ($locker_server=='ptslockers') {
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, \Drupal::config('arborcat.settings')->get('pts_lockers'));
        curl_setopt($ch, CURLOPT_HEADER, 0);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_USERPWD, \Drupal::config('arborcat.settings')->get('lockers_pass'));
        $result = curl_exec($ch);

        $simpleXML = simplexml_load_string($result);
        $i=1;
        $s = $simpleXML->doors->children();
        if ($s->assign1==0&$s->assign2==0&$s->assign3==0&$s->assign4==0) {
            $available = FALSE;
        } elseif ($s->assign1!==0||$s->assign2!==0||$s->assign3!==0||$s->assign4!==0) {
            $available = TRUE;
        }
    } elseif ($locker_server=='mcblockers') {
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, \Drupal::config('arborcat.settings')->get('mcb_lockers'));
        curl_setopt($ch, CURLOPT_HEADER, 0);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_USERPWD, \Drupal::config('arborcat.settings')->get('lockers_pass'));
        $result = curl_exec($ch);
        if ($result != NULL) {
            preg_match_all('%name="web_patroninserted_door.*?value="([\d]+?)"%s', $result, $matches);
            if ($matches[1][0]>0) {
                $available = TRUE;
            }
        }
    }
    return $available;
  }

  /*
   * returns a list of request pickup locations.
   * If a branch location is passed in, that a filtered list of pickup locations is returned
   */
  function arborcat_pickup_locations($destLocation = NULL){
    $db = \Drupal::database();
    $query = $db->select('arborcat_pickup_location', 'apl')
      ->fields('apl', ['locationId', 'branchLocationId', 'timePeriod', 'timePeriodStart', 'timePeriodEnd', 'maxLockers', 'locationName', 'locationDescription'])
      ->condition('active', 1, "=");

    // add in a condition if a location is supplied to filter on
    if (3 == strlen($destLocation)) {
        $query->condition('apl.branchLocationId', (int) $destLocation, '=');
    }
    $result = $query->execute();
    
    $pickupLocationRecords = $result->fetchAll();
    return $pickupLocationRecords;
  }

  /*
   * returns an array of active locker pickup locations.
   */
  function arborcat_locker_pickup_locations() {
    $locations = [];
    $db = \Drupal::database();
    $query = $db->select('arborcat_pickup_location', 'apl')
        ->fields('apl', ['locationId'])
        ->condition('maxLockers', 0, '>')
        ->condition('active', 1, '=')
        ->execute();
    $locations = array_values($query->fetchCol());
    return $locations;
  }


   /*
   * Checks the availability of a locker fo the specified date and timePeriod.
   * If a branch location is passed in, that a filtered list of pickup locations is returned
   */
  function arborcat_check_locker_availability($queryDate, $locationObject, $patronId) {
    $availableLockers = 0;
    // Query current arborcat_patron_pickup_request records for the date and timePeriod to get inuse count
    // fields pickupDate & timeSlot
    $db = \Drupal::database();
    $pickup_point = $locationObject->locationId;

    $query = $db->select('arborcat_patron_pickup_request', 'appr')
      ->fields('appr', ['patronId'])
      ->condition('pickupDate', $queryDate)
      ->condition('pickupLocation', $pickup_point, '=')
      ->groupBy('patronId');
    $results = $query->execute()->fetchCol();
 
    $lockersInUse = count($results);
    $availableLockers = $locationObject->maxLockers - $lockersInUse;
    $returnval = FALSE;
    // check whether this patron already has a pickup appointment already scheduled for this locker at this time. OR whether there are available lockers at this time
    if (in_array($patronId,$results) || $availableLockers > 0) {
      $returnval = TRUE;
    }
    return ($returnval);
  }

  function arborcat_load_patron_eligible_holds($patron_barcode, $requestLocation=NULL) {
    $guzzle = \Drupal::httpClient();
    $api_url = \Drupal::config('arborcat.settings')->get('api_url');
    $selfCheckApi_key = \Drupal::config('arborcat.settings')->get('selfcheck_key');
    $selfCheckApi_key .= '-' .  $patron_barcode;

    try {
      $patron_holds = json_decode($guzzle->get("$api_url/patron/$selfCheckApi_key/holds")->getBody()->getContents(), TRUE);

      // For debugging LWK  
      // $jsonData = file_get_contents('10005279_21621034452183_holds.txt');
      // $patron_holds = json_decode($jsonData, TRUE);

    } catch (Exception $e) {
      $eligible_holds['error'] = 'Info not found';
      return $eligible_holds;
    }
    $eligible_holds = [];
    //start at 1 to avoid issue with eligible holds array not being zero-based
    $i=1;

    $mel_mappings = [
          113 => 102,
          114 => 103,
          115 => 104,
          116 => 105,
          117 => 106
    ];

    $db = \Drupal::database();
    if (count($patron_holds)) {
        foreach ($patron_holds as $hold) {
            if ($hold['status'] == 'Ready for Pickup') {
                // check if there is a requestLocation to filter on. If not, set $includeLocationBoolean to TRUE, otherwise perform check for location match
                $includeLocationBoolean = ($requestLocation == NULL) ? TRUE : ($hold['hold']['pickup_lib'] == $requestLocation);
                if ($includeLocationBoolean || isset($mel_mappings[$hold['hold']['pickup_lib']])) {
                    // if pickup appt already set, don't display item
                    $pickup_req_exists = $db->query("SELECT * from arborcat_patron_pickup_request WHERE requestId = :hid", [':hid' => $hold['id']])->fetch();
                    if (isset($pickup_req_exists->id)) {
                        continue;
                    }
                    $shelf_expire = date('Y-m-d', strtotime($hold['hold']['shelf_expire_time']));
                    if (arborcat_eligible_for_locker($hold) && $shelf_expire >= date('Y-m-d')) {
                        $eligible_holds[$i] = [
                              'Title' => $hold['title'],
                              'Status' => $hold['status'],
                              'PickupLoc' => $hold['pickup'],
                              'pickup_lib' => $hold['hold']['pickup_lib'],
                              'holdId' => $hold['id'],
                              'usr' => $hold['hold']['usr']
                          ];
                        $i++;
                    }
                }
            }
        }
    }
    return $eligible_holds;
  }

  function arborcat_get_scheduled_pickups($barcode) {
    $guzzle = \Drupal::httpClient();
    $api_url = \Drupal::config('arborcat.settings')->get('api_url');
    $selfCheckApi_key = \Drupal::config('arborcat.settings')->get('selfcheck_key');
    $selfCheckApi_key .= '-' .  $barcode;

    $scheduled_pickups = json_decode($guzzle->get("$api_url/patron/$selfCheckApi_key/scheduled-pickups")->getBody()->getContents(), TRUE);

    return $scheduled_pickups;
  }
