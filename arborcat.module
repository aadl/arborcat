<?php

use Drupal\Core\Datetime\DrupalDateTime;

/**
 * Display help and module information
 * @return help text for section
 */
function arborcat_help($path, $arg) {
  $output = '';

  switch ($path) {
  case "admin/help#arborcat":
    $output = '<p>' .  t("Catalog functions for Evergreen") . '</p>';

    break;
  }

  return $output;
}

function arborcat_theme($existing, $type, $theme, $path) {
  return [
    'catalog' => [
      'variables' => [
        'catalog_slider' => NULL,
        'community_slider' => NULL,
        'podcast_slider' => NULL
      ]
    ],
    'catalog_record' => [
      'variables' => [
        'record' => NULL,
        'api_key' => NULL,
        'lists' => NULL,
        'reviews' => NULL,
        'review_form' => NULL,
        'ratings' => NULL
      ]
    ],
    'moderate_reviews' => [
      'variables' => [
        'reviews' => NULL,
        'pager' => NULL
      ]
    ],
    'pickup_request_form' => [
      'variables' => [
          'formhtml' => NULL,
          'max_locker_items_check' => NULL
      ]
    ],
   'pickup_helper_theme' => [
      'variables' => [
        'search_form' => NULL,
        'location_urls' => NULL,
        'barcode' => NULL,
        'scheduled_pickups' => NULL
      ]
    ],
  ];
}

/**
 * Pass variables to front-end JS
 * @param $variables
 */
function arborcat_preprocess_page(&$variables) {
    // get the max locker item check  from ArborCat module settings
    $max_locker_items = \Drupal::config('arborcat.settings')->get('max_locker_items_check');
    $variables['#attached']['drupalSettings']['arborcat']['max_locker_items_check'] = $max_locker_items;
}

function arborcat_generate_api_key() {
  // Use the UUID service to generate a Unique identifier
  $uuid_service = \Drupal::service('uuid');

  return $uuid_service->generate();
}

// set drupal messages for fees or expired card
function arborcat_patron_fines_expired($fines, $patron) {
  $patron_clean = TRUE;
  $messenger = \Drupal::messenger();

  if ($fines->total > 25) {
    $messenger->addError("We're sorry, but your account balance is over $25. You won't be able to renew items and requests won't be fulfilled.");
    $patron_clean = FALSE;
  }
  if (strtotime($patron->expires) < time()) {
    $message = \Drupal\Core\Render\Markup::create("We're sorry, but your card has expired! Details on how to <a href=\"https://aadl.org/lcards\">renew online here</a>.");
    $messenger->addError($message);
    $patron_clean = FALSE;
  }

  return $patron_clean;
}

//check if a hold is eligible for a locker based on material type
function arborcat_eligible_for_locker($hold) {
  if ($hold['material'] == "Oversize") {
    return FALSE;
  } else {
    return TRUE;
  }
}

//check if there are lockers available to place holds into
function arborcat_lockers_available($branch) {
  $mess = \Drupal::messenger();
  $available=FALSE;
  if (stripos($branch, 'Malletts')!==FALSE) {
    $locker_server = 'mcblockers';
  } elseif (stripos($branch, 'Pittsfield')!==FALSE) {
    $locker_server = 'ptslockers';
  }
  if ($locker_server=='ptslockers') {
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, \Drupal::config('arborcat.settings')->get('pts_lockers'));
    curl_setopt($ch, CURLOPT_HEADER, 0);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_USERPWD, \Drupal::config('arborcat.settings')->get('lockers_pass'));
    $result = curl_exec($ch);

    $simple_xml = simplexml_load_string($result);
    $i=1;
    $s = $simple_xml->doors->children();
    if ($s->assign1==0&$s->assign2==0&$s->assign3==0&$s->assign4==0) {
      $available = FALSE;
    } elseif ($s->assign1!==0||$s->assign2!==0||$s->assign3!==0||$s->assign4!==0) {
      $available = TRUE;
    }
  } elseif ($locker_server=='mcblockers') {
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, \Drupal::config('arborcat.settings')->get('mcb_lockers'));
    curl_setopt($ch, CURLOPT_HEADER, 0);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_USERPWD, \Drupal::config('arborcat.settings')->get('lockers_pass'));
    $result = curl_exec($ch);
    if ($result != NULL) {
      preg_match_all('%name="web_patroninserted_door.*?value="([\d]+?)"%s', $result, $matches);
      if ($matches[1][0]>0) {
        $available = TRUE;
      }
    }
  }

  return $available;
}

/*
  * returns a list of request pickup locations.
  * If a branch location is passed in, that a filtered list of pickup locations is returned
  */
function arborcat_pickup_locations($dest_location = NULL, $lookup_name = NULL, $front_back = NULL, $lobby_only = NULL, $inactive = NULL) {
  $db = \Drupal::database();
  $query = $db->select('arborcat_pickup_location', 'apl')
    ->fields('apl', ['locationId', 'branchLocationId', 'timePeriod', 'timePeriodStart', 'timePeriodEnd', 'maxLockers', 'locationName', 'locationDescription']);
  if (!$inactive) {
    $query->condition('active', 1, "=");
  }

  // if lookup_name supplied, get lib locations and lookup the branch number.
  // Then set the parameter $dest_location to the branch number. If set, the location filter will be applied
  if (strlen($lookup_name) > 0) {
    $guzzle = \Drupal::httpClient();
    $api_url = \Drupal::config('arborcat.settings')->get('api_url');
    $locations = json_decode($guzzle->get("$api_url/locations")->getBody()->getContents());
    foreach ($locations as $key => $value) {
      if (strpos($value, $lookup_name) !== FALSE) {
        $dest_location = $key;

        break;
      }
    }
  }
  // add in a condition if a location is supplied to filter on
  if (3 == strlen($dest_location)) {
    $query->condition('branchLocationId', (int) $dest_location, '=');
  }
  // add in a condition if a lobby_only is supplied to filter on
  if (NULL != $lobby_only) {
    $query->condition('maxLockers', 0, '=');
  }
  // add in a condition for 'Front' versus 'Back' in the location Name
  if (NULL != $front_back) {
    $query->condition('locationName', "%" . $db->escapeLike($front_back) . "%", 'like');
  }
  $result = $query->execute();
  $pickup_location_records = $result->fetchAll();

  return $pickup_location_records;
}

 /*
  * returns an array of active locker pickup locations.
  */
function arborcat_locker_pickup_locations() {
  $locations = [];
  $db = \Drupal::database();
  $query = $db->select('arborcat_pickup_location', 'apl')
      ->fields('apl', ['locationId'])
      ->condition('maxLockers', 0, '>')
      ->condition('active', 1, '=')
      ->execute();
  $locations = array_values($query->fetchCol());

  return $locations;
}

  /*
  * Checks the availability of a locker fo the specified date and timePeriod.
  * If a branch location is passed in, that a filtered list of pickup locations is returned
  */
function arborcat_check_locker_availability($query_date, $location_object, $patron_id) {
  $available_lockers = 0;
  // Query current arborcat_patron_pickup_request records for the date and timePeriod to get inuse count
  // fields pickupDate & timeSlot
  $db = \Drupal::database();
  $pickup_point = $location_object->locationId;

  $query = $db->select('arborcat_patron_pickup_request', 'appr')
    ->fields('appr', ['patronId'])
    ->condition('pickupDate', $query_date)
    ->condition('pickupLocation', $pickup_point, '=')
    ->groupBy('patronId');
  $results = $query->execute()->fetchCol();

  $lockers_in_use = count($results);
  $available_lockers = $location_object->maxLockers - $lockers_in_use;
  $return_val = FALSE;
  // check whether this patron already has a pickup appointment already scheduled for this locker at this time. OR whether there are available lockers at this time
  if (in_array($patron_id, $results) || $available_lockers > 0) {
    $return_val = TRUE;
  }

  return ($return_val);
}

function arborcat_load_patron_eligible_holds($patron_barcode, $request_location=NULL) {
  $guzzle = \Drupal::httpClient();
  $api_url = \Drupal::config('arborcat.settings')->get('api_url');
  $self_check_api_key = \Drupal::config('arborcat.settings')->get('selfcheck_key');
  $self_check_api_key .= '-' .  $patron_barcode;

  try {
    $patron_holds = json_decode($guzzle->get("$api_url/patron/$self_check_api_key/holds")->getBody()->getContents(), TRUE);
  } catch (Exception $e) {
    $eligible_holds['error'] = 'Info not found';

    return $eligible_holds;
  }
  $eligible_holds = [];
  //start at 1 to avoid issue with eligible holds array not being zero-based
  $i=1;

  $mel_mappings = [
        113 => 102,
        114 => 103,
        115 => 104,
        116 => 105,
        117 => 106
  ];

  $db = \Drupal::database();
  if (count($patron_holds)) {
    foreach ($patron_holds as $hold) {
      if ($hold['status'] == 'Ready for Pickup') {
        // check if there is a request_location to filter on. If not, set $include_location_boolean to TRUE, otherwise perform check for location match
        $include_location_boolean = ($request_location == NULL) ? TRUE : ($hold['hold']['pickup_lib'] == $request_location);
        if ($include_location_boolean || isset($mel_mappings[$hold['hold']['pickup_lib']])) {
          // if pickup appt already set, don't display item
          $pickup_req_exists = $db->query("SELECT * from arborcat_patron_pickup_request WHERE requestId = :hid", [':hid' => $hold['id']])->fetch();
          if (isset($pickup_req_exists->id)) {
            continue;
          }
          $shelf_expire = date('Y-m-d', strtotime($hold['hold']['shelf_expire_time']));
          if (arborcat_eligible_for_locker($hold) && $shelf_expire >= date('Y-m-d')) {
            $eligible_holds[$i] = [
              'Title' => $hold['title'],
              'Status' => $hold['status'],
              'PickupLoc' => $hold['pickup'],
              'pickup_lib' => $hold['hold']['pickup_lib'],
              'holdId' => $hold['id'],
              'usr' => $hold['hold']['usr'],
              'artPrintTool' => ($hold['material'] == "Art Print" || $hold['material'] == "Tools") ? TRUE : FALSE
            ];
            $i++;
          }
        }
      }
    }
  }

  return $eligible_holds;
}

function arborcat_get_scheduled_pickups($barcode) {
  $guzzle = \Drupal::httpClient();
  $api_url = \Drupal::config('arborcat.settings')->get('api_url');
  $self_check_api_key = \Drupal::config('arborcat.settings')->get('selfcheck_key');
  $self_check_api_key .= '-' .  $barcode;
  $scheduled_pickups = [];

  try {
    $scheduled_pickups = json_decode($guzzle->get("$api_url/patron/$self_check_api_key/scheduled-pickups?range=7")->getBody()->getContents(), TRUE);
  } catch (Exception $e) {
    $found_string = strpos($e->getMessage(), "Barcode Not Found");
    $scheduled_pickups['error'] = ($found_string >=0) ? "Error - Barcode Not Found" : "Error getting patron's scheduled pickups";
  }

  return $scheduled_pickups;
}

function arborcat_create_pickup_request_record($pickup_request_type, $custom_id, $patron_id, $branch, $time_slot, $pickup_location, $pickup_date, $contact_email, $contact_sms, $contact_phone, $locker_code) {
  // create or update arborcat_patron_pickup_request record - used for holds, seed shop orders, print requests
  $db = \Drupal::database();

  // First check if the record already exists for this custom_id
  $results = [];
  try {
    $query = $db->select('arborcat_patron_pickup_request', 'appr')
      ->fields('appr', ['id'])
      ->condition('requestId', $custom_id, '=')
      ->condition('requestType', $pickup_request_type, '=');
    $results = $query->execute()->fetchCol();
  } catch (Exception $e) {
      \Drupal::messenger()->addError('An error occurred Duplicate record!');
    return -1;
  }
  // If a record exists containing the $custom_id, update the record and then return the id of the updated record,
  // otherwise insert a new record with the custom_id and return the $id of the new record
  if (count($results) > 0) {
    $record_id = $results[0];
    $dbaction = $db->update('arborcat_patron_pickup_request')
      ->condition('id', $record_id, '=')
      ->fields([
        'requestType'   => $pickup_request_type,
        'requestId'     => $custom_id,
        'patronId'      => $patron_id,
        'branch'        => (int) $branch,
        'timeSlot'      => $time_slot,
        'pickupLocation' => $pickup_location,
        'pickupDate'    => $pickup_date,
        'contactEmail'  => $contact_email,
        'contactSMS'    => $contact_sms,
        'contactPhone'  => $contact_phone,
        'locker_code'   => $locker_code,
        'completed'     => ($pickup_request_type == 'GRAB_BAG' || $pickup_request_type == 'PRINT_JOB') ? 1 : 0
      ]);

    $transaction = $db->startTransaction();
    try {
      $dbaction->execute();
      $return_val = $record_id;
    }
    catch (Exception $e) {
      \Drupal::messenger()->addError('An error occurred updating this pickup request. Exception Message: ' . $e->getMessage());
      $transaction->rollback();
      $return_val = -1;
    }
    unset($transaction);

    return $return_val;
  }
  else {
    $dbaction = $db->insert('arborcat_patron_pickup_request')->fields([
      'requestType'   => $pickup_request_type,
      'requestId'     => $custom_id,
      'patronId'      => $patron_id,
      'branch'        => (int) $branch,
      'timeSlot'      => $time_slot,
      'pickupLocation' => $pickup_location,
      'pickupDate'    => $pickup_date,
      'contactEmail'  => $contact_email,
      'contactSMS'    => $contact_sms,
      'contactPhone'  => $contact_phone,
      'created'       => time(),
      'locker_code'   => $locker_code,
      'completed'     => ($pickup_request_type == 'GRAB_BAG' || $pickup_request_type == 'PRINT_JOB') ? 1 : 0
    ]);

    $transaction = $db->startTransaction();
    try {
      $id = $dbaction->execute();
      $return_val = $id;
    }
    catch (Exception $e) {
      \Drupal::messenger()->addError('An error occurred saving this pickup request. Exception Message: ' . $e->getMessage());
      $transaction->rollback();
      $return_val = -1;
    }
    unset($transaction);

    return $return_val;
  }
}

function arborcat_barcode_from_patron_id($patron_id) {
  $return_val = "";
  $api_key = \Drupal::config('arborcat.settings')->get('api_key');
  $api_url = \Drupal::config('arborcat.settings')->get('api_url');
  $guzzle = \Drupal::httpClient();
  $request_url = "$api_url/patron?apikey=$api_key&pnum=$patron_id";

  try {
    $json = json_decode($guzzle->get($request_url)->getBody()->getContents());
  } catch (Exception $e) {
    // Note no error message is not set here - check in made in calling methods for a valid barcode and
    // an error message is displayed to the user there.

    return $return_val;
  }
  if ($json) {
    $barcode =  $json->evg_user->card->barcode;
    $return_val = $barcode;
  }

  return $return_val;
}

function arborcat_patron_id_from_barcode($barcode) {
  $return_val = "";
  $api_key = \Drupal::config('arborcat.settings')->get('api_key');
  $api_url = \Drupal::config('arborcat.settings')->get('api_url');
  $guzzle = \Drupal::httpClient();
  $request_url = "$api_url/patron?apikey=$api_key&barcode=$barcode";
  try {
    $json = json_decode($guzzle->get($request_url)->getBody()->getContents());
  } catch (Exception $e) {
    // Note no error message is not set here - check in made in calling method for a valid patron_id and
    // an error message is displayed to the user there.

    return $return_val;
  }

  if ($json) {
    $patron_id =  $json->pid;
    $return_val = $patron_id;
  }

  return $return_val;
}

function arborcat_check_active_barcode($pnum) {
  // Find primary barcode for given pnum
  $barcode = 0;
  $api_key = \Drupal::config('arborcat.settings')->get('api_key');
  $api_url = \Drupal::config('arborcat.settings')->get('api_url');
  $guzzle = \Drupal::httpClient();
  $request_url = "$api_url/patron?apikey=$api_key&pnum=$pnum";

  // Set up status message
  $message = "\nBarcode Update for Evergreen Patron ID: $pnum\n\n";
  $email_subject = "Card Update Log for Patron: $pnum";

  try {
    $json = json_decode($guzzle->get($request_url)->getBody()->getContents());
  } catch (Exception $e) {
    $message .= "Exception getting patron data from API:\n" . $e->getMessage();
  }
  if ($json) {
    $barcode = $json->card;

    // Find all user accounts with existing pnum
    $uids = \Drupal::entityQuery('user')->condition('field_patron_id', $pnum)->accessCheck(FALSE)->execute();

    if ($barcode) {
      $message .= "Evergreen Active Barcode: $barcode\n";

      if (count($uids)) {
        foreach ($uids as $uid) {
          // Check the barcode for the corresponding pnum for each user
          $account = \Drupal\user\Entity\User::load($uid);
          $patron_ids = $account->get('field_patron_id')->getValue();
          $barcodes = $account->get('field_barcode')->getValue();

          foreach ($patron_ids as $i => $field_patron_id) {
            if ($field_patron_id['value'] == $pnum) {
              // Found the right pnum, check the barcode
              $message .= "\nDrupal User found: ID = $uid, offset = $i, ";
              $drupal_barcode = $barcodes[$i]['value'];
              if ($drupal_barcode != $barcode) {
                // Mismatch, update barcode for user account and display message
                $barcodes[$i]['value'] = $barcode;
                $account->set('field_barcode', $barcodes);
                $account->save();
                $message .= "UPDATED barcode: old = $drupal_barcode, new = $barcode\n";
                \Drupal::messenger()->addMessage("Updated library card with new barcode: $barcode");
              }
              else {
                $message .= "no update needed for barcode $drupal_barcode\n";
              }
              break;
            }
          }
        }
      }

      // Check for additional barcodes in Evergreen
      $additional_barcodes = [];
      foreach ($json->evg_user->cards as $card) {
        if ($card->barcode != $barcode) {
          $additional_barcodes[$card->id] = $card->barcode;
        }
      }

      if (count($additional_barcodes) > 0) {
        ksort($additional_barcodes); // No strict dates on barcodes, but assume lower IDs are older
        $additional_barcodes[] = $barcode; // Place current barcode at the end of the update list

        // Attempt to update Overdrive barcodes, one at a time, oldest to newest
        while ($old_barcode = current($additional_barcodes)) {
          if ($new_barcode = next($additional_barcodes)) {
            $response = arborcat_update_overdrive($old_barcode, $new_barcode);
            if ($response['status'] == 'error') {
              $email_subject .= " [OVERDRIVE UPDATE ERROR]";
            }
            $message .= "\n" . $response['message'];
          }
        }
      }
      else {
        $message .= "No additional barcodes in Evergreen.\n";
      }
    }
    else {
      // No barcode in Evergreen, check if purged
      $message .= "No barcode in Evergreen";
      if (strpos($json->evg_user->usrname, "$pnum-PURGED") === 0) {
        $message .= ', user record PURGED: ' . $json->evg_user->usrname;
      }
      $message .= "\n";
/*
      // Check if drupal users
      if (count($uids)) {
        foreach ($uids as $uid) {
          // Remove patron field data from user record
          $account = \Drupal\user\Entity\User::load($uid);
          $api_keys = $account->get('field_api_key')->getValue();
          $barcodes = $account->get('field_barcode')->getValue();
          $patron_ids = $account->get('field_patron_id')->getValue();

          foreach ($patron_ids as $i => $field_patron_id) {
            if ($field_patron_id['value'] == $pnum) {
              $message .= "\nDrupal User found: ID = $uid, offset = $i, api_key, barcode, patron_id fields removed\n";
              unset($api_keys[$i]);
              unset($barcodes[$i]);
              unset($patron_ids[$i]);
            }
          }

          $account->set('field_api_key', $api_keys);
          $account->set('field_barcode', $barcodes);
          $account->set('field_patron_id', $patron_ids);
          $account->save();
        }
      }
 */
    }
  }

  // mail log message if email address is defined
  $email = trim(\Drupal::config('arborcat.settings')->get('cardupdate_email'));
  if ($email) {
    $headers = "From: $email" . "\r\n" .
             "Reply-To: $email" . "\r\n" .
             "X-Mailer: PHP/" . phpversion() .
             "Content-Type: text/html; charset=\"us-ascii\"";

    mail($email, $email_subject, $message, $headers);
  }

  return $barcode;
}

function arborcat_update_overdrive($old_barcode = '', $new_barcode = '') {
  $overdrive_update_url = \Drupal::config('arborcat.settings')->get('overdrive_update_url');
  $guzzle = \Drupal::httpClient();

  $result = [
    'status' => 'success',
    'message' => "Overdrive Update Script $old_barcode to $new_barcode:\n",
  ];

  $update_url = "$overdrive_update_url?old=$old_barcode&new=$new_barcode";

  try {
    $response = json_decode($guzzle->get($update_url)->getBody()->getContents());
  } catch (Exception $e) {
    $result['status'] = 'error';
    $result['message'] .= 'EXCEPTION: ' . $e->getMessage();
  }

  if (isset($response)) {
    foreach ($response as $field => $value) {
      $result['message'] .= "  $field: $value\n";
    }
  }

  return $result;
}

function arborcat_custom_pickup_request($pickup_request_type, $custom_pickup_request_id) {
  $result_message = '';
  if ($pickup_request_type == 'PRINT_JOB' || $pickup_request_type == 'GRAB_BAG') {
    // Extract fields from the printJob request form
    $db = \Drupal::database();
    $query = $db->select('webform_submission_data', 'wsd');
    $query->fields('wsd', ['name', 'value']);
    $query->condition('sid', $custom_pickup_request_id, '=');
    $raw_name_value_results= $query->execute()->fetchAll();

    // process the raw results and create an associative array of the results.
    // NOTE notification_options can have multiple entries and this is handled by creating a regular array of the different result values
    $assoc_results = [];
    foreach ($raw_name_value_results as $entry) {
      $key_name = $entry->name;
      if ("notification_options" == $key_name) {
        if (!array_key_exists($key_name, $assoc_results)) {
          $assoc_results[$key_name] = [];
        }
        array_push($assoc_results[$key_name], $entry->value);
      } else {
        $assoc_results[$key_name] = $entry->value;
      }
    }

    if (count($assoc_results) > 0) {
      $bar_code = $assoc_results['barcode'];
      $patron_id = (strlen($bar_code) == 14) ? arborcat_patron_id_from_barcode($bar_code) : NULL;
      $branch_name_array = explode(" ", $assoc_results['delivery_method']);
      if ($branch_name_array[0] == 'Mail') {  // Mail to Patron option - no pickup request should be created
        $result_message = 'SUCCESS';
      } else {
        $front_back = ($branch_name_array[1] == 'Back' || $branch_name_array[1] == 'Front') ? $branch_name_array[1] : NULL;
        $pickup_locations = arborcat_pickup_locations(NULL, $branch_name_array[0], $front_back, TRUE, TRUE);
        $branch = $pickup_locations[0]->branchLocationId;
        $pickup_location = $pickup_locations[0]->locationId;

        $time_slot = 0;
        $pickup_date = $assoc_results['pickup_date'];
        // if shelf-service, adjust the pickup date to tomorrow. Need to loop on the dates, incrementing by day,
        // until we get one that does not have an exlusion record for that date
        if ($pickup_request_type == 'GRAB_BAG') {
            $new_pickup_date = new DateTime();  // get todays date
            do {
              $new_pickup_date->modify('+1 day');
            } while (false == arborcat_is_date_location_valid($pickup_location, $new_pickup_date->format('Y-m-d')));

            $pickup_date = $new_pickup_date->format('Y-m-d');
        }
        $patron_phone = $assoc_results['patron_phone'];
        $patron_email = $assoc_results['patron_email'];
        $notification_options = $assoc_results['notification_options'];
        // create new arborcat_pickup_request_record (if one does not already exist)
        $result = arborcat_create_pickup_request_record(
          $pickup_request_type,
          $custom_pickup_request_id,
          $patron_id,
          $branch,
          $time_slot,
          $pickup_location,
          $pickup_date,
          (in_array('email', array_map('strtolower', $notification_options))) ? $patron_email : NULL,
          (in_array('text', array_map("strtolower", $notification_options))) ? $patron_phone : NULL,
          (in_array('phone call', array_map("strtolower", $notification_options))) ? $patron_phone : NULL,
          $patron_phone ?? NULL
        );

        if ($result > 0) {
          $result_message = 'SUCCESS';
        } else {
          $result_message = 'Failed to create Pickup Request Record';
        }
      }
    }
  } elseif ($pickup_request_type == 'SG_ORDER') {
  }

  return $result_message;
}

  /*
  * get_location_id - INPUT PARAM: $location - a location string name, a 3 digit branch location id or a 4 digit location id
  * see arborcat_pickup_location table for values
  */
function get_location_id($location) {
  $location_id = NULL;
  if (strlen($location) > 4) {
    // Get the list of branch locations from the API
    $api_url = \Drupal::config('arborcat.settings')->get('api_url');
    $guzzle = \Drupal::httpClient();
    $aadl_locations = json_decode($guzzle->get("$api_url/locations")->getBody()->getContents());
    // loop through and search for the name of the branch passed in.
    foreach ($aadl_locations as $index => $value) {
      // perform 1st word comparison of the location string passed in and each of the branch locations
      if (strtok($value, " ") ==  strtok($location, " ")) {
        $location_id = $index;
        break;
      }
    }
  }
  else {
    $location_int = intval($location);
    if ($location_int < 1000) {
      $location_id = $location;
      $branch_location_ids = arborcat_get_pickup_locations($location, TRUE);
      $location_id = (count($branch_location_ids) > 0) ? $branch_location_ids[0] : 0;
    }
    else {
      $location_id = $location;
    }
  }

  return $location_id;
}

function arborcat_is_date_location_valid($location, $pickup_date) {
  $pickup_location = get_location_id($location);
  $date_exclusion_info = NULL;
  // only if the pickup_location is a valid location do we check for a valid date/location
  if (0 < $pickup_location) {
    $date_info = arborcat_get_pickup_dates($pickup_location, $pickup_date, $pickup_date);
    $date_exclusion_info = $date_info[$pickup_date]['date_exclusion_data'];
  }
  return (NULL == $date_exclusion_info) ? TRUE : FALSE;
}


function arborcat_get_pickup_dates($location, $start_date_ymd, $end_date_ymd) {
  // Loop through each date, 1 day at a time, checking if there is an exclusion.
  // Load exclusion dates for date range defined in the two params from the table: arborcat_pickup_location_exclusion
  // For all branches (locationId=9999)
  $db = \Drupal::database();
  $query = $db->select('arborcat_pickup_location', 'apl');
  $query->fields('apl', ['branchLocationId']);
  $query->condition('locationId', $location, '=');
  $result = $query->execute();
  $branch_location_id = $result->fetchField(0);

  // array initialized with "library wide" location Id - 9999 and the branch location id
  $query_location_ids = ['9999', $branch_location_id];

  $pickup_dates = [];
  // Loop through each date, 1 day at a time, checking if there is an exclusion.
  $date_iterator = new DateTime($start_date_ymd);
  $ending_date = new DateTime($end_date_ymd);
  // loop through the set of days supplied in the interval start_date to end_date
  while ($date_iterator <= $ending_date) {
    $query = $db->select('arborcat_pickup_location_exclusion', 'aple');
    $query->fields('aple', ['locationId', 'dateStart', 'dateEnd','display_reason', 'dropdown_display']);

    $branch_location_ids = arborcat_get_pickup_locations($location);
    array_push($query_location_ids, ...$branch_location_ids);

    // always push the location passed in because the exclusion record may contain
    array_push($query_location_ids, $location);
    $query->condition('locationId', $query_location_ids, 'IN');
    $query->condition('dateStart', date_format($date_iterator, 'Y-m-d'), '<=');
    $query->condition('dateEnd', date_format($date_iterator, 'Y-m-d'), '>=');
    // sort the exclusions that match the date by location in descending order so library-wide (9999) closures are first in the array of found exclusions
    $query->orderBy('locationId', 'DESC');

    $result = $query->execute();
    $exclusion_data_array = $result->fetchAll();

    $exclusion_data = NULL;
    if (count($exclusion_data_array) > 0) {
      $exclusion_data = $exclusion_data_array[0];
    }

    // format the display string for the date that will be shown in the pickup dates dropdown menu
    $date_month_day = $date_iterator->format('M. j');
    $day_of_week = intval($date_iterator->format('w'));
    $day_of_week_string = ['Sun','Mon','Tue','Wed','Thu','Fri','Sat',][$day_of_week];
    $day_month_daynum = $day_of_week_string . ', ' . $date_month_day;
    $datestr_Ymd = $date_iterator->format('Y-m-d');
    $pickup_dates[$datestr_Ymd] = ['display_date_string' => $day_month_daynum, 'date_exclusion_data' => $exclusion_data];

    $date_iterator->modify('+1 day');
  }

  return $pickup_dates;
}

function arborcat_get_pickup_locations($branch_location_id, $lobby_only = false) {
  $db = \Drupal::database();
  $query = $db->select('arborcat_pickup_location', 'apl');
  $query->fields('apl', ['locationId']);
  $query->condition('branchLocationId', $branch_location_id, '=');
  if ($lobby_only) {
    $query->condition('locationDescription', '%' . $db->escapeLike('lobby') . '%', 'LIKE');
  }
  $result = $query->execute();
  $location_ids = $result->fetchCol();

  return $location_ids;
}

// cron to create appt blocks if a branch reaches 900
function _arborcat_create_appt_block() {
  $db = \Drupal::database();
  $tomorrow = date('Y-m-d', strtotime('+1 day'));
  // grab appt totals by branch for next day
  $branch_totals = $db->query('SELECT count(*) as total, branch FROM arborcat_patron_pickup_request WHERE pickupDate = :tmrw GROUP BY branch', [':tmrw' => $tomorrow])
    ->fetchAll();
  foreach ($branch_totals as $total) {
    if ((int) $total->total >= 950) {
      // check that a block is not already in place
      $exists = $db->query("SELECT * FROM arborcat_pickup_location_exclusion WHERE locationId = :lid AND dateStart = :tmrw AND notes = 'at capacity'", [':lid' => $total->branch, ':tmrw' => $tomorrow])
        ->fetch();
      if (!$exists) {
        $db->insert('arborcat_pickup_location_exclusion')
          ->fields([
            'locationId' => $total->branch,
            'dateStart' => $tomorrow,
            'dateEnd' => $tomorrow,
            'notes' => 'at capacity',
            'display_reason' => 'There are no more available slots for appointments on this date.',
            'dropdown_display' => 'Full'
          ])
          ->execute();
      }
    }
  }
}

function arborcat_additional_accounts($user) {
  $additional_accounts = [];
  $guzzle = \Drupal::httpClient();
  $api_url = \Drupal::config('arborcat.settings')->get('api_url');
  $addl_barcodes = $user->get('field_barcode');
  if ($addl_barcodes) {
    foreach ($addl_barcodes as $k => $addl_barcode) {
      $api_key = $user->field_api_key[$k]->value;
      $patron_id = $user->field_patron_id[$k]->value;
      $barcode = $user->field_barcode[$k]->value;
      $addl_account = [ 'delta' => $k,
                        'barcode' => $barcode,
                        'patron_id' => $patron_id,
                        'api_key' => $api_key,
                        'subaccount' => json_decode($guzzle->get("$api_url/patron/$api_key/get")->getBody()->getContents())
                      ];
      $additional_accounts[] = $addl_account;
    }
  }
  return $additional_accounts;
}
